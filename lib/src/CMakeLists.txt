CMAKE_MINIMUM_REQUIRED (VERSION 2.8.8) 
MESSAGE(STATUS "CMAKE VERSION ${CMAKE_VERSION}")

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/../../cmake ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

#Setting a Project name
SET(PROJECT_NAME "hcrng")
SET(PROJECT_NAME_EXT "hiprng")
SET(HIP_SUPPORT $ENV{HIP_SUPPORT})

# Find HIP
SET(HIP_PATH $ENV{HIP_PATH})
IF(${HIP_SUPPORT} MATCHES "on") 
  IF(NOT DEFINED HIP_PATH)
    SET(HIP_PATH /opt/rocm/hip)
  ENDIF()
  EXECUTE_PROCESS(COMMAND ${HIP_PATH}/bin/hipconfig --platform OUTPUT_VARIABLE HIP_PLATFORM)
  MESSAGE (STATUS "HIP_PATH :  ${HIP_PATH}")
ENDIF()

# Build hcblas and hipblas from source on AMD platform
IF(${PLATFORM} MATCHES "hcc")
  PROJECT(${PROJECT_NAME})
  MESSAGE(STATUS "PROJECT NAME : ${PROJECT_NAME}")
  # Find HCC compiler
  FIND_PACKAGE(HC++ 1.0 REQUIRED)

  ADD_SUBDIRECTORY(generators)
  #Setting a variable for source files
  SET(SRCS ${RNGSRC})

  EXECUTE_PROCESS(COMMAND ${HCC_CONFIG} --install --cxxflags
                            OUTPUT_VARIABLE HCC_CXXFLAGS)
  EXECUTE_PROCESS(COMMAND ${HCC_CONFIG} --install --ldflags --shared
                            OUTPUT_VARIABLE HCC_LDFLAGS)
  
  STRING(STRIP "${HCC_CXXFLAGS}" HCC_CXXFLAGS)
  STRING(STRIP "${HCC_LDFLAGS}" HCC_LDFLAGS)
  SET(HCC_CXXFLAGS "${HCC_CXXFLAGS} -I${CMAKE_CURRENT_SOURCE_DIR}/../include")
  SET(HCC_LDFLAGS "${HCC_LDFLAGS}")
  
  IF(${HIP_SUPPORT} MATCHES "on") 
    SET(HCC_CXXFLAGS "${HCC_CXXFLAGS} -I${HIP_PATH}/include -D__HIP_PLATFORM_HCC__=")
    SET(HCC_LDFLAGS "${HCC_LDFLAGS} -L${HIP_PATH}/lib -lhip_hcc")
  ENDIF()

  FOREACH(src_file ${SRCS})
    SET_PROPERTY(SOURCE ${src_file} APPEND_STRING PROPERTY COMPILE_FLAGS " ${HCC_CXXFLAGS} ")
  ENDFOREACH()

  ADD_LIBRARY("${PROJECT_NAME}" SHARED ${SRCS})
  SET_PROPERTY(TARGET "${PROJECT_NAME}" APPEND_STRING PROPERTY LINK_FLAGS " ${HCC_LDFLAGS} ")
  TARGET_LINK_LIBRARIES("${PROJECT_NAME}" hc_am)
  INSTALL(TARGETS "${PROJECT_NAME}" 
    RUNTIME DESTINATION lib
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    PERMISSIONS WORLD_READ WORLD_WRITE WORLD_EXECUTE
  )
  INSTALL(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../include/" DESTINATION include)
  
  IF(${HIP_SUPPORT} MATCHES "on") 
    SET(HIPRNGSRCS ${RNGSRC} ${CMAKE_CURRENT_SOURCE_DIR}/hcc_detail/hiprng.cpp ${CMAKE_CURRENT_SOURCE_DIR}/hcc_detail/hip_rng_kernel.cpp)

    # Setting header dependencies for hiprng library generation
    FOREACH(src_file ${HIPRNGSRCS})
     SET_PROPERTY(SOURCE ${src_file} APPEND_STRING PROPERTY COMPILE_FLAGS " ${HCC_CXXFLAGS} ")
    ENDFOREACH()

    #Generating hiprng shared object
    ADD_LIBRARY("${PROJECT_NAME_EXT}_hcc" SHARED ${HIPRNGSRCS})
    SET_PROPERTY(TARGET "${PROJECT_NAME_EXT}_hcc" APPEND_STRING PROPERTY LINK_FLAGS " ${HCC_LDFLAGS} ")
    TARGET_LINK_LIBRARIES("${PROJECT_NAME_EXT}_hcc" hc_am)

    INSTALL(TARGETS "${PROJECT_NAME_EXT}_hcc" 
      RUNTIME DESTINATION lib
      LIBRARY DESTINATION lib
      ARCHIVE DESTINATION lib
      PERMISSIONS WORLD_READ WORLD_WRITE WORLD_EXECUTE
      )

    INSTALL(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../include/" DESTINATION include)
  ENDIF()
ELSEIF(${PLATFORM} MATCHES "nvcc")
  PROJECT (${PROJECT_NAME})
  MESSAGE(STATUS "PROJECT NAME : ${PROJECT_NAME_EXT}")
  MESSAGE(STATUS "Building hiprng.cpp")

  SET(HIPRNGSRCS ${CMAKE_CURRENT_SOURCE_DIR}/nvcc_detail/hiprng.cpp)

  SET(CXXFLAGS "-I${CMAKE_CURRENT_SOURCE_DIR}/../include -I${HIP_PATH}/include -I/usr/local/cuda/include -D__HIP_PLATFORM_NVCC__=")
  SET(LDFLAGS "-L/usr/local/cuda/lib64 -L/usr/local/cuda/lib")

  FOREACH(src_file ${HIPRNGSRCS})
    SET_PROPERTY(SOURCE ${src_file} APPEND_STRING PROPERTY COMPILE_FLAGS " ${CXXFLAGS} ")
  ENDFOREACH()
  ADD_LIBRARY("${PROJECT_NAME_EXT}_nvcc" SHARED ${HIPRNGSRCS})
  SET_PROPERTY(TARGET "${PROJECT_NAME_EXT}_nvcc" APPEND_STRING PROPERTY LINK_FLAGS " ${LDFLAGS} ")
  TARGET_LINK_LIBRARIES("${PROJECT_NAME_EXT}_nvcc" cudart curand)
  
  INSTALL(TARGETS "${PROJECT_NAME_EXT}_nvcc" 
    RUNTIME DESTINATION lib
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    PERMISSIONS WORLD_READ WORLD_WRITE WORLD_EXECUTE
  )

  INSTALL(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../include/" DESTINATION include)
ENDIF()

